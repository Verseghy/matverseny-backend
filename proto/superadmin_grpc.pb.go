// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SuperAdminClient is the client API for SuperAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperAdminClient interface {
	SetTime(ctx context.Context, in *SetTimeRequest, opts ...grpc.CallOption) (*SetTimeResponse, error)
	GetTime(ctx context.Context, in *GetTimeRequest, opts ...grpc.CallOption) (*GetTimeResponse, error)
	// Add admins
	GetResults(ctx context.Context, in *GetResultsRequest, opts ...grpc.CallOption) (SuperAdmin_GetResultsClient, error)
}

type superAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperAdminClient(cc grpc.ClientConnInterface) SuperAdminClient {
	return &superAdminClient{cc}
}

func (c *superAdminClient) SetTime(ctx context.Context, in *SetTimeRequest, opts ...grpc.CallOption) (*SetTimeResponse, error) {
	out := new(SetTimeResponse)
	err := c.cc.Invoke(ctx, "/superadmin.SuperAdmin/SetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminClient) GetTime(ctx context.Context, in *GetTimeRequest, opts ...grpc.CallOption) (*GetTimeResponse, error) {
	out := new(GetTimeResponse)
	err := c.cc.Invoke(ctx, "/superadmin.SuperAdmin/GetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminClient) GetResults(ctx context.Context, in *GetResultsRequest, opts ...grpc.CallOption) (SuperAdmin_GetResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SuperAdmin_ServiceDesc.Streams[0], "/superadmin.SuperAdmin/GetResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &superAdminGetResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SuperAdmin_GetResultsClient interface {
	Recv() (*GetResultsResponse, error)
	grpc.ClientStream
}

type superAdminGetResultsClient struct {
	grpc.ClientStream
}

func (x *superAdminGetResultsClient) Recv() (*GetResultsResponse, error) {
	m := new(GetResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SuperAdminServer is the server API for SuperAdmin service.
// All implementations must embed UnimplementedSuperAdminServer
// for forward compatibility
type SuperAdminServer interface {
	SetTime(context.Context, *SetTimeRequest) (*SetTimeResponse, error)
	GetTime(context.Context, *GetTimeRequest) (*GetTimeResponse, error)
	// Add admins
	GetResults(*GetResultsRequest, SuperAdmin_GetResultsServer) error
	mustEmbedUnimplementedSuperAdminServer()
}

// UnimplementedSuperAdminServer must be embedded to have forward compatible implementations.
type UnimplementedSuperAdminServer struct {
}

func (UnimplementedSuperAdminServer) SetTime(context.Context, *SetTimeRequest) (*SetTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTime not implemented")
}
func (UnimplementedSuperAdminServer) GetTime(context.Context, *GetTimeRequest) (*GetTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTime not implemented")
}
func (UnimplementedSuperAdminServer) GetResults(*GetResultsRequest, SuperAdmin_GetResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedSuperAdminServer) mustEmbedUnimplementedSuperAdminServer() {}

// UnsafeSuperAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperAdminServer will
// result in compilation errors.
type UnsafeSuperAdminServer interface {
	mustEmbedUnimplementedSuperAdminServer()
}

func RegisterSuperAdminServer(s grpc.ServiceRegistrar, srv SuperAdminServer) {
	s.RegisterService(&SuperAdmin_ServiceDesc, srv)
}

func _SuperAdmin_SetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServer).SetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin.SuperAdmin/SetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServer).SetTime(ctx, req.(*SetTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdmin_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin.SuperAdmin/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServer).GetTime(ctx, req.(*GetTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdmin_GetResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuperAdminServer).GetResults(m, &superAdminGetResultsServer{stream})
}

type SuperAdmin_GetResultsServer interface {
	Send(*GetResultsResponse) error
	grpc.ServerStream
}

type superAdminGetResultsServer struct {
	grpc.ServerStream
}

func (x *superAdminGetResultsServer) Send(m *GetResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SuperAdmin_ServiceDesc is the grpc.ServiceDesc for SuperAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "superadmin.SuperAdmin",
	HandlerType: (*SuperAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTime",
			Handler:    _SuperAdmin_SetTime_Handler,
		},
		{
			MethodName: "GetTime",
			Handler:    _SuperAdmin_GetTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetResults",
			Handler:       _SuperAdmin_GetResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "superadmin.proto",
}
