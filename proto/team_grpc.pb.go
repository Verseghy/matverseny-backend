// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeamClient is the client API for Team service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamClient interface {
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error)
	JoinTeam(ctx context.Context, in *JoinTeamRequest, opts ...grpc.CallOption) (*JoinTeamResponse, error)
	LeaveTeam(ctx context.Context, in *LeaveTeamRequest, opts ...grpc.CallOption) (*LeaveTeamResponse, error)
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	// Owner RPCs
	UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamResponse, error)
	DisbandTeam(ctx context.Context, in *DisbandTeamRequest, opts ...grpc.CallOption) (*DisbandTeamResponse, error)
	ChangeLock(ctx context.Context, in *ChangeLockRequest, opts ...grpc.CallOption) (*ChangeLockResponse, error)
	ChangeCoOwnerStatus(ctx context.Context, in *ChangeCoOwnerStatusRequest, opts ...grpc.CallOption) (*ChangeCoOwnerStatusResponse, error)
	// Co-owner RPCs
	KickUser(ctx context.Context, in *KickUserRequest, opts ...grpc.CallOption) (*KickUserResponse, error)
	GenerateJoinCode(ctx context.Context, in *GenerateJoinCodeRequest, opts ...grpc.CallOption) (*GenerateJoinCodeResponse, error)
}

type teamClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamClient(cc grpc.ClientConnInterface) TeamClient {
	return &teamClient{cc}
}

func (c *teamClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error) {
	out := new(CreateTeamResponse)
	err := c.cc.Invoke(ctx, "/team.Team/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) JoinTeam(ctx context.Context, in *JoinTeamRequest, opts ...grpc.CallOption) (*JoinTeamResponse, error) {
	out := new(JoinTeamResponse)
	err := c.cc.Invoke(ctx, "/team.Team/JoinTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) LeaveTeam(ctx context.Context, in *LeaveTeamRequest, opts ...grpc.CallOption) (*LeaveTeamResponse, error) {
	out := new(LeaveTeamResponse)
	err := c.cc.Invoke(ctx, "/team.Team/LeaveTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, "/team.Team/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamResponse, error) {
	out := new(UpdateTeamResponse)
	err := c.cc.Invoke(ctx, "/team.Team/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) DisbandTeam(ctx context.Context, in *DisbandTeamRequest, opts ...grpc.CallOption) (*DisbandTeamResponse, error) {
	out := new(DisbandTeamResponse)
	err := c.cc.Invoke(ctx, "/team.Team/DisbandTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) ChangeLock(ctx context.Context, in *ChangeLockRequest, opts ...grpc.CallOption) (*ChangeLockResponse, error) {
	out := new(ChangeLockResponse)
	err := c.cc.Invoke(ctx, "/team.Team/ChangeLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) ChangeCoOwnerStatus(ctx context.Context, in *ChangeCoOwnerStatusRequest, opts ...grpc.CallOption) (*ChangeCoOwnerStatusResponse, error) {
	out := new(ChangeCoOwnerStatusResponse)
	err := c.cc.Invoke(ctx, "/team.Team/ChangeCoOwnerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) KickUser(ctx context.Context, in *KickUserRequest, opts ...grpc.CallOption) (*KickUserResponse, error) {
	out := new(KickUserResponse)
	err := c.cc.Invoke(ctx, "/team.Team/KickUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) GenerateJoinCode(ctx context.Context, in *GenerateJoinCodeRequest, opts ...grpc.CallOption) (*GenerateJoinCodeResponse, error) {
	out := new(GenerateJoinCodeResponse)
	err := c.cc.Invoke(ctx, "/team.Team/GenerateJoinCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServer is the server API for Team service.
// All implementations must embed UnimplementedTeamServer
// for forward compatibility
type TeamServer interface {
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error)
	JoinTeam(context.Context, *JoinTeamRequest) (*JoinTeamResponse, error)
	LeaveTeam(context.Context, *LeaveTeamRequest) (*LeaveTeamResponse, error)
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	// Owner RPCs
	UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamResponse, error)
	DisbandTeam(context.Context, *DisbandTeamRequest) (*DisbandTeamResponse, error)
	ChangeLock(context.Context, *ChangeLockRequest) (*ChangeLockResponse, error)
	ChangeCoOwnerStatus(context.Context, *ChangeCoOwnerStatusRequest) (*ChangeCoOwnerStatusResponse, error)
	// Co-owner RPCs
	KickUser(context.Context, *KickUserRequest) (*KickUserResponse, error)
	GenerateJoinCode(context.Context, *GenerateJoinCodeRequest) (*GenerateJoinCodeResponse, error)
	mustEmbedUnimplementedTeamServer()
}

// UnimplementedTeamServer must be embedded to have forward compatible implementations.
type UnimplementedTeamServer struct {
}

func (UnimplementedTeamServer) CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedTeamServer) JoinTeam(context.Context, *JoinTeamRequest) (*JoinTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTeam not implemented")
}
func (UnimplementedTeamServer) LeaveTeam(context.Context, *LeaveTeamRequest) (*LeaveTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveTeam not implemented")
}
func (UnimplementedTeamServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedTeamServer) UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedTeamServer) DisbandTeam(context.Context, *DisbandTeamRequest) (*DisbandTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisbandTeam not implemented")
}
func (UnimplementedTeamServer) ChangeLock(context.Context, *ChangeLockRequest) (*ChangeLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLock not implemented")
}
func (UnimplementedTeamServer) ChangeCoOwnerStatus(context.Context, *ChangeCoOwnerStatusRequest) (*ChangeCoOwnerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCoOwnerStatus not implemented")
}
func (UnimplementedTeamServer) KickUser(context.Context, *KickUserRequest) (*KickUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUser not implemented")
}
func (UnimplementedTeamServer) GenerateJoinCode(context.Context, *GenerateJoinCodeRequest) (*GenerateJoinCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateJoinCode not implemented")
}
func (UnimplementedTeamServer) mustEmbedUnimplementedTeamServer() {}

// UnsafeTeamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamServer will
// result in compilation errors.
type UnsafeTeamServer interface {
	mustEmbedUnimplementedTeamServer()
}

func RegisterTeamServer(s grpc.ServiceRegistrar, srv TeamServer) {
	s.RegisterService(&Team_ServiceDesc, srv)
}

func _Team_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_JoinTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).JoinTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/JoinTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).JoinTeam(ctx, req.(*JoinTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_LeaveTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).LeaveTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/LeaveTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).LeaveTeam(ctx, req.(*LeaveTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).UpdateTeam(ctx, req.(*UpdateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_DisbandTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisbandTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).DisbandTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/DisbandTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).DisbandTeam(ctx, req.(*DisbandTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_ChangeLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).ChangeLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/ChangeLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).ChangeLock(ctx, req.(*ChangeLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_ChangeCoOwnerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCoOwnerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).ChangeCoOwnerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/ChangeCoOwnerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).ChangeCoOwnerStatus(ctx, req.(*ChangeCoOwnerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_KickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).KickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/KickUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).KickUser(ctx, req.(*KickUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_GenerateJoinCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateJoinCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).GenerateJoinCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/GenerateJoinCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).GenerateJoinCode(ctx, req.(*GenerateJoinCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Team_ServiceDesc is the grpc.ServiceDesc for Team service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Team_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "team.Team",
	HandlerType: (*TeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeam",
			Handler:    _Team_CreateTeam_Handler,
		},
		{
			MethodName: "JoinTeam",
			Handler:    _Team_JoinTeam_Handler,
		},
		{
			MethodName: "LeaveTeam",
			Handler:    _Team_LeaveTeam_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _Team_ListMembers_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _Team_UpdateTeam_Handler,
		},
		{
			MethodName: "DisbandTeam",
			Handler:    _Team_DisbandTeam_Handler,
		},
		{
			MethodName: "ChangeLock",
			Handler:    _Team_ChangeLock_Handler,
		},
		{
			MethodName: "ChangeCoOwnerStatus",
			Handler:    _Team_ChangeCoOwnerStatus_Handler,
		},
		{
			MethodName: "KickUser",
			Handler:    _Team_KickUser_Handler,
		},
		{
			MethodName: "GenerateJoinCode",
			Handler:    _Team_GenerateJoinCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "team.proto",
}
